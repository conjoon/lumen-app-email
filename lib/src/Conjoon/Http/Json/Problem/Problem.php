<?php

/**
 * conjoon
 * php-ms-imapuser
 * Copyright (C) 2021 Thorsten Suckow-Homberg https://github.com/conjoon/php-ms-imapuser
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

declare(strict_types=1);

namespace Conjoon\Http\Json\Problem;

use BadMethodCallException;
use Conjoon\Util\Jsonable;

/**
 * Abstract base class for representatives according to rfc7807.
 *
 * @see https://datatracker.ietf.org/doc/html/rfc7807
 *
 *
 * Class Problem
 * @package Conjoon\Http\Api\Problem
 *
 * @method getStatus()
 * @method getTitle()
 * @method getDetail()
 * @method getType()
 * @method getInstance()
 */
abstract class Problem implements Jsonable
{
    /**
     * "status" (number) - The HTTP status code ([RFC7231], Section 6)
     * generated by the origin server for this occurrence of the problem.
     *
     * @var int|null
     */
    protected ?int $status = null;

    /**
     * A short, human-readable summary of the problem
     * type.  It SHOULD NOT change from occurrence to occurrence of the
     * problem, except for purposes of localization (e.g., using
     * proactive content negotiation; see [RFC7231], Section 3.4)
     *
     * @var string
     */
    protected string $title = "";

    /**
     * "detail" (string) - A human-readable explanation specific to this
     * occurrence of the problem.
     *
     * @var string
     */
    protected string $detail = "";


    /**
     * A URI reference that identifies the specific
     * occurrence of the problem.  It may or may not yield further
     * information if dereferenced.
     *
     * @var string
     */
    protected string $instance = "";

    /**
     * A URI reference [RFC3986] that identifies the
     * problem type.  This specification encourages that, when
     * dereferenced, it provide human-readable documentation for the
     * problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
     * this member is not present, its value is assumed to be
     * "about:blank".
     *
     * @var string
     */
    protected string $type = "about:blank";


    /**
     * Problem constructor.
     *
     * @param string|null $title
     * @param string|null $detail
     * @param string|null $instance
     * @param string|null $type
     */
    public function __construct(
        string $title = null,
        string $detail = null,
        string $instance = null,
        string $type = null
    ) {
        $this->title = $title ?? $this->title;
        $this->detail = $detail ?? $this->detail;
        $this->instance = $instance ?? $this->instance;
        $this->type = $type ?? $this->type;
    }


    /**
     * Provides access to getStatus(), getTitle() and getDetail(), getType(), getInstance().
     *
     * @param string $method
     * @param $arguments
     *
     * @return mixed|null
     */
    public function __call(string $method, $arguments)
    {
        if (strpos($method, 'get') === 0) {
            $property = strtolower(substr($method, 3));

            if (in_array($property, ["status", "title", "type", "detail", "instance"])) {
                return $this->{$property};
            }
        }

        throw new BadMethodCallException("no method named \"$method\" found.");
    }


    /**
     * Returns only non empty attributes with the assoc array.
     *
     * @return array
     */
    public function toJson(): array
    {
        $data = [
            "status" => $this->status,
            "title" => $this->title,
            "detail" => $this->detail,
            "instance" => $this->instance,
            "type" => $this->type
        ];

        return array_filter($data, fn ($v) => !empty($v));
    }
}
